import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
	const authHeader = request.headers.get('Authorization')
	if (!authHeader || !authHeader.startsWith('Bearer ')) {
		return NextResponse.json(
			{ error: 'Unauthorized: Missing or invalid token' },
			{ status: 401 }
		)
	}

	const token = authHeader.split(' ')[1]

	try {
		// –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö API-–º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
		const possibleBackendUrls = [
			`${process.env.NEXT_PUBLIC_API_URL}/api/favorites`,
			`${process.env.NEXT_PUBLIC_API_URL}/api/auth/favorites`,
			`${process.env.NEXT_PUBLIC_API_URL}/api/user/favorites`,
		]

		let lastError = null
		let successResponse = null

		// –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ URLs –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
		for (const backendUrl of possibleBackendUrls) {
			try {
				console.log(`Attempting to fetch favorites from: ${backendUrl}`)

				const response = await fetch(backendUrl, {
					method: 'GET',
					headers: {
						Authorization: `Bearer ${token}`,
						'Content-Type': 'application/json',
					},
				})

				if (response.ok) {
					successResponse = await response.json()
					console.log(`Successfully fetched favorites from: ${backendUrl}`)
					break // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
				} else {
					const errorData = await response
						.json()
						.catch(() => ({ message: 'Unknown error' }))
					lastError = {
						status: response.status,
						message: errorData.message || response.statusText,
					}
					console.error(
						`Failed to fetch favorites from ${backendUrl}: ${response.status} ${lastError.message}`
					)
				}
			} catch (error) {
				console.error(`Error fetching favorites from ${backendUrl}:`, error)
				lastError = {
					status: 500,
					message: error instanceof Error ? error.message : 'Unknown error',
				}
			}
		}

		// –ï—Å–ª–∏ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
		if (successResponse) {
			return NextResponse.json(successResponse)
		}

		// –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ URLs –∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
		console.error('All favorite API endpoints failed')

		// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
		if (process.env.NODE_ENV === 'development') {
			console.log('Returning mock favorites data for development')
			return NextResponse.json([
				{
					id: 1,
					title: '–î–µ–º–æ –Ω–æ—Ç–∞ 1',
					owner: '–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä –¢–µ—Å—Ç–æ–≤—ã–π',
					thumbnail_url: '/images/demo/sheet1.jpg',
					added_to_favorites: new Date().toISOString(),
				},
				{
					id: 2,
					title: '–î–µ–º–æ –Ω–æ—Ç–∞ 2',
					owner: '–î—Ä—É–≥–æ–π –ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä',
					thumbnail_url: '/images/demo/sheet2.jpg',
					added_to_favorites: new Date().toISOString(),
				},
			])
		}

		return NextResponse.json(
			{ error: lastError?.message || 'Failed to fetch favorites' },
			{ status: lastError?.status || 500 }
		)
	} catch (error) {
		console.error('Error in favorites API route:', error)
		return NextResponse.json(
			{ error: 'Internal server error' },
			{ status: 500 }
		)
	}
}

export async function POST(request: NextRequest) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
	const authHeader = request.headers.get('Authorization')
	if (!authHeader || !authHeader.startsWith('Bearer ')) {
		console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ')
		return NextResponse.json(
			{ error: 'Unauthorized: Missing or invalid token' },
			{ status: 401 }
		)
	}

	const token = authHeader.split(' ')[1]
	console.log(
		'üîë –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:',
		authHeader.substring(0, 15) + '...'
	)

	try {
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
		const body = await request.json()
		console.log(
			'üîç –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –∫ /favorites —Å –¥–∞–Ω–Ω—ã–º–∏:',
			JSON.stringify(body, null, 2)
		)

		// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: id –∏ sheet_music_id
		const itemId = body.id || body.sheet_music_id
		const itemType = body.type || 'sheet_music'

		if (!itemId) {
			console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä ID –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞:', body)
			return NextResponse.json(
				{ error: 'Missing required parameter: id or sheet_music_id' },
				{ status: 400 }
			)
		}

		console.log(`üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: ID=${itemId}, Type=${itemType}`)

		// Url –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
		const backendUrl = `${process.env.NEXT_PUBLIC_API_URL}/api/favorites`
		console.log(`üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥: ${backendUrl}`)

		// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –±—ç–∫–µ–Ω–¥
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
		const requestBody = {
			id: Number(itemId),
			sheet_music_id: Number(itemId),
			type: itemType,
		}

		console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestBody, null, 2))

		const response = await fetch(backendUrl, {
			method: 'POST',
			headers: {
				Authorization: `Bearer ${token}`,
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(requestBody),
		})

		console.log(`üîÑ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –±—ç–∫–µ–Ω–¥–∞: ${response.status}`)

		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON –∏–ª–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç
		let responseData
		const contentType = response.headers.get('content-type')
		if (contentType && contentType.includes('application/json')) {
			responseData = await response.json()
			console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(responseData, null, 2))
		} else {
			const text = await response.text()
			console.log(
				`üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: ${text.substring(0, 100)}${
					text.length > 100 ? '...' : ''
				}`
			)
			// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ JSON
			try {
				responseData = JSON.parse(text)
			} catch {
				responseData = { message: text || 'No response data' }
			}
		}

		if (!response.ok) {
			console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç –±—ç–∫–µ–Ω–¥–∞: ${response.status}`, responseData)
			return NextResponse.json(
				{
					error: responseData.message || response.statusText || 'Unknown error',
				},
				{ status: response.status }
			)
		}

		return NextResponse.json(responseData || { success: true })
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error)
		return NextResponse.json(
			{
				error: error instanceof Error ? error.message : 'Internal server error',
			},
			{ status: 500 }
		)
	}
}

export async function DELETE(request: NextRequest) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
	const authHeader = request.headers.get('Authorization')
	if (!authHeader || !authHeader.startsWith('Bearer ')) {
		return NextResponse.json(
			{ error: 'Unauthorized: Missing or invalid token' },
			{ status: 401 }
		)
	}

	const token = authHeader.split(' ')[1]

	try {
		// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
		const url = new URL(request.url)
		const id = url.searchParams.get('id')
		const type = url.searchParams.get('type') || 'sheet_music'

		console.log('üîç DELETE request to /favorites with params:', { id, type })

		if (!id) {
			console.error('‚ùå Missing ID parameter in DELETE request')
			return NextResponse.json(
				{ error: 'Missing required parameter: id' },
				{ status: 400 }
			)
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —á–∏—Å–ª–æ
		const numericId = Number(id)
		console.log(
			`üîÑ Removing item from favorites: ID=${numericId}, Type=${type}`
		)

		// Url –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
		const backendUrl = `${process.env.NEXT_PUBLIC_API_URL}/api/favorites/${numericId}?type=${type}`
		console.log(`üîó Sending request to backend: ${backendUrl}`)

		const response = await fetch(backendUrl, {
			method: 'DELETE',
			headers: {
				Authorization: `Bearer ${token}`,
				'Content-Type': 'application/json',
			},
		})

		console.log(`üîÑ Backend response status: ${response.status}`)

		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON –∏–ª–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç
		let responseData
		const contentType = response.headers.get('content-type')
		if (contentType && contentType.includes('application/json')) {
			responseData = await response.json()
			console.log('üìä Response data:', responseData)
		} else {
			const text = await response.text()
			console.log(
				`üìù Response text: ${text.substring(0, 100)}${
					text.length > 100 ? '...' : ''
				}`
			)
			// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ JSON
			try {
				responseData = JSON.parse(text)
			} catch {
				responseData = { message: text || 'No response data' }
			}
		}

		if (!response.ok) {
			console.error(`‚ùå Error from backend: ${response.status}`, responseData)
			return NextResponse.json(
				{
					error: responseData.message || response.statusText || 'Unknown error',
				},
				{ status: response.status }
			)
		}

		return NextResponse.json(responseData || { success: true })
	} catch (error) {
		console.error('‚ùå Error removing from favorites:', error)
		return NextResponse.json(
			{
				error: error instanceof Error ? error.message : 'Internal server error',
			},
			{ status: 500 }
		)
	}
}
