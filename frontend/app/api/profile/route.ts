import { NextRequest, NextResponse } from 'next/server'

// –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS
export async function OPTIONS() {
	return new NextResponse(null, {
		status: 200,
		headers: {
			'Access-Control-Allow-Origin': '*',
			'Access-Control-Allow-Methods': 'GET',
			'Access-Control-Allow-Headers': 'Content-Type, Authorization',
		},
	})
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
export async function GET(req: NextRequest) {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	const headers = {
		'Access-Control-Allow-Origin': '*',
		'Access-Control-Allow-Methods': 'GET',
		'Access-Control-Allow-Headers': 'Content-Type, Authorization',
	}

	try {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
		const authHeader = req.headers.get('Authorization')

		if (!authHeader || !authHeader.startsWith('Bearer ')) {
			return NextResponse.json(
				{ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
				{ status: 401, headers }
			)
		}

		// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
		if (process.env.NODE_ENV === 'development') {
			console.log('[Profile API] Returning demo data for development')
			return NextResponse.json(getDemoProfile(), { status: 200, headers })
		}

		// –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö URL –¥–ª—è –±—ç–∫–µ–Ω–¥–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
		const backendUrls = [
			`${process.env.NEXT_PUBLIC_API_URL}/api/auth/me`,
			`${process.env.NEXT_PUBLIC_API_URL}/api/auth/user`,
			`${process.env.NEXT_PUBLIC_API_URL}/api/auth/profile`,
			`${process.env.NEXT_PUBLIC_API_URL}/api/user`,
			`${process.env.NEXT_PUBLIC_API_URL}/api/users/me`,
		]

		let successResponse = null
		let lastError = null

		for (const backendUrl of backendUrls) {
			try {
				console.log(`[Profile API] Trying to fetch profile from: ${backendUrl}`)

				// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
				const controller = new AbortController()
				const timeoutId = setTimeout(() => controller.abort(), 3000) // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç

				const response = await fetch(backendUrl, {
					method: 'GET',
					headers: {
						Authorization: authHeader,
						'Content-Type': 'application/json',
					},
					signal: controller.signal,
				}).catch(err => {
					console.error(
						`[Profile API] Fetch error for ${backendUrl}:`,
						err.message || err
					)
					return null
				})

				clearTimeout(timeoutId)

				// –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –≤–µ—Ä–Ω—É–ª null
				if (!response) {
					continue
				}

				// –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
				const contentType = response.headers.get('content-type')
				if (!contentType || !contentType.includes('application/json')) {
					console.log(`[Profile API] Non-JSON response from ${backendUrl}`)
					continue
				}

				try {
					// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
					const data = await response.json()

					if (response.ok) {
						console.log(`[Profile API] Success from: ${backendUrl}`)
						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						if (data && (data.id || data.username || data.email)) {
							successResponse = {
								data: {
									id: data.id || 0,
									username: data.username || 'User',
									email: data.email || '',
									avatar: data.avatar || null,
									role: data.role || 'user',
									// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
									registered_at:
										data.registered_at ||
										data.registeredAt ||
										new Date().toISOString(),
									...data,
								},
								backendUrl,
							}
							break
						} else {
							console.log(
								`[Profile API] Response from ${backendUrl} lacks user data:`,
								data
							)
						}
					} else {
						console.log(
							`[Profile API] Error ${response.status} from ${backendUrl}:`,
							data
						)
						lastError = { status: response.status, data, backendUrl }
					}
				} catch (parseError) {
					console.error(
						`[Profile API] JSON parse error from ${backendUrl}:`,
						parseError
					)
				}
			} catch (fetchError) {
				console.error(
					`[Profile API] Fetch error from ${backendUrl}:`,
					fetchError
				)
			}
		}

		if (successResponse) {
			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
			return NextResponse.json(successResponse.data, { status: 200, headers })
		}

		// –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ —É—Å–ø–µ—à–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
		try {
			// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ —ç—Ç–æ JWT)
			const token = authHeader.split(' ')[1]

			try {
				const tokenData = parseJwt(token)

				if (tokenData && (tokenData.id || tokenData.sub)) {
					console.log('[Profile API] Creating profile from token data')
					return NextResponse.json(
						{
							id: tokenData.id || tokenData.sub || 0,
							username: tokenData.username || tokenData.name || 'User',
							email: tokenData.email || '',
							role: tokenData.role || 'user',
							registered_at: new Date().toISOString(),
							_source: 'token_data',
						},
						{ status: 200, headers }
					)
				}
			} catch (tokenParseError) {
				console.error('[Profile API] Token parse error:', tokenParseError)
			}

			// –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
			if (
				process.env.NODE_ENV !== 'production' &&
				process.env.NODE_ENV !== 'test'
			) {
				console.log('[Profile API] Returning demo data')
				return NextResponse.json(getDemoProfile(), { status: 200, headers })
			}
		} catch (tokenError) {
			console.error('[Profile API] Failed to parse token:', tokenError)
		}

		// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
		console.error('[Profile API] All attempts failed, returning error 500')
		return NextResponse.json(
			{
				error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è',
				message: lastError
					? lastError.data?.message || lastError.data?.error
					: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
				_debug: {
					triedUrls: backendUrls,
					lastError,
				},
			},
			{ status: 500, headers }
		)
	} catch (error) {
		console.error('[Profile API] Unhandled error:', error)

		// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
		if (process.env.NODE_ENV === 'development') {
			console.log('[Profile API] Returning demo data after error')
			return NextResponse.json(getDemoProfile('error_fallback'), {
				status: 200,
				headers,
			})
		}

		return NextResponse.json(
			{
				error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
				message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
			},
			{ status: 500, headers }
		)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
function getDemoProfile(source: string = 'demo_data') {
	return {
		id: 1,
		username: 'Demo User',
		email: 'demo@example.com',
		avatar: null,
		role: 'user',
		registered_at: new Date(
			Date.now() - 30 * 24 * 60 * 60 * 1000
		).toISOString(), // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
		last_login_at: new Date().toISOString(),
		stats: {
			videosCompleted: 5,
			totalVideos: 20,
			favoriteSheetMusic: 8,
			favoriteVideos: 3,
			totalComments: 12,
			totalTimeSpent: 45,
		},
		achievements: [
			{
				id: 1,
				title: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
				description: '–í—ã—É—á–∏–ª –ø–µ—Ä–≤—É—é –º–µ–ª–æ–¥–∏—é',
				icon: 'üéµ',
				unlockedAt: new Date(
					Date.now() - 20 * 24 * 60 * 60 * 1000
				).toISOString(),
			},
			{
				id: 2,
				title: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è',
				description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∑–∞–Ω—è—Ç–∏–π',
				icon: 'üî•',
				unlockedAt: new Date(
					Date.now() - 10 * 24 * 60 * 60 * 1000
				).toISOString(),
			},
		],
		_source: source,
	}
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö JWT —Ç–æ–∫–µ–Ω–∞
interface JwtPayload {
	id?: number
	sub?: string | number
	username?: string
	name?: string
	email?: string
	role?: string
	exp?: number
	iat?: number
	[key: string]: string | number | boolean | object | undefined | null // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞
function parseJwt(token: string): JwtPayload | null {
	try {
		// –î–ª—è JWT —Ç–æ–∫–µ–Ω–∞: —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º payload
		const base64Url = token.split('.')[1]
		if (!base64Url) return null

		const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
		let jsonPayload
		try {
			jsonPayload = atob(base64)
		} catch (e) {
			console.error('Invalid base64 in token:', e)
			return null
		}

		try {
			return JSON.parse(jsonPayload)
		} catch (e) {
			console.error('Invalid JSON in token payload:', e)
			return null
		}
	} catch (e) {
		console.error('Error parsing JWT:', e)
		return null
	}
}
