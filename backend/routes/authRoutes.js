const express = require('express')
const pool = require('../db')
const bcrypt = require('bcryptjs')
const jwt = require('jsonwebtoken')
const { authenticateToken } = require('../middleware/authMiddleware')
const { validationResult } = require('express-validator')
const {
	registerValidation,
	loginValidation,
} = require('../validators/authValidator')
const nodemailer = require('nodemailer')
const crypto = require('crypto')
const fs = require('fs')
const path = require('path')

require('dotenv').config()

const router = express.Router()

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const avatarsDir = path.join(__dirname, '../uploads/avatars')
if (!fs.existsSync(avatarsDir)) {
	fs.mkdirSync(avatarsDir, { recursive: true })
	console.log('–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤:', avatarsDir)
}

router.post('/register', registerValidation, async (req, res) => {
	const errors = validationResult(req)
	if (!errors.isEmpty()) {
		return res.status(400).json({ errors: errors.array() })
	}

	try {
		const { username, email, password } = req.body

		const userExists = await pool.query(
			'SELECT * FROM users WHERE email = $1 OR username = $2',
			[email, username]
		)
		if (userExists.rows.length > 0) {
			return res
				.status(400)
				.json({ error: 'Email –∏–ª–∏ Username —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è' })
		}

		const hashedPassword = await bcrypt.hash(password, 10)

		const newUser = await pool.query(
			'INSERT INTO users (username, email, password, registered_at) VALUES ($1, $2, $3, CURRENT_TIMESTAMP) RETURNING id, username, email',
			[username, email, hashedPassword]
		)

		res.json({ message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', user: newUser.rows[0] })
	} catch (error) {
		console.error(error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
})

// ‚úÖ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
router.post('/login', loginValidation, async (req, res) => {
	const errors = validationResult(req)
	if (!errors.isEmpty()) {
		console.log('Login validation errors:', errors.array())
		return res.status(400).json({ errors: errors.array() })
	}

	try {
		const { email, password } = req.body
		console.log(
			`[Backend Auth] Login attempt for email: ${email}, password provided: ${!!password}`
		)

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await pool.query('SELECT * FROM users WHERE email = $1', [
			email,
		])

		console.log(
			`[Backend Auth] User lookup result: found=${user.rows.length > 0}`
		)

		if (user.rows.length === 0) {
			console.log(`[Backend Auth] User not found: ${email}`)
			return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' })
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
		console.log(
			`[Backend Auth] Checking password for user: ${user.rows[0].username}`
		)
		const isMatch = await bcrypt.compare(password, user.rows[0].password)
		console.log(
			`[Backend Auth] Password check result: ${isMatch ? 'match' : 'no match'}`
		)

		if (!isMatch) {
			console.log(`[Backend Auth] Invalid password for user: ${email}`)
			return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' })
		}

		// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
		const token = jwt.sign(
			{ id: user.rows[0].id, username: user.rows[0].username },
			process.env.JWT_SECRET,
			{ expiresIn: '1d' }
		)

		console.log(
			`[Backend Auth] Login successful for user: ${user.rows[0].username} (ID: ${user.rows[0].id})`
		)

		res.json({
			message: '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!',
			token,
			user: {
				id: user.rows[0].id,
				username: user.rows[0].username,
				email: user.rows[0].email,
			},
		})
	} catch (error) {
		console.error('[Backend Auth] Server error during login:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
})

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/profile', authenticateToken, async (req, res) => {
	try {
		console.log(`üîç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${req.user.id}`)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞–ª–∏–¥–Ω—ã–π
		if (!req.user.id) {
			console.error('‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ')
			return res.status(400).json({ error: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω' })
		}

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await pool.query(
			'SELECT id, username, email, avatar, registered_at FROM users WHERE id = $1',
			[req.user.id]
		)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if (user.rows.length === 0) {
			console.error(
				`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${req.user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`
			)
			return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
		}

		// –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
		console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:`, {
			id: user.rows[0].id,
			username: user.rows[0].username,
			avatar: user.rows[0].avatar ? '–ï—Å—Ç—å –∞–≤–∞—Ç–∞—Ä' : '–ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–∞',
			registered_at: user.rows[0].registered_at,
		})

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
		res.json(user.rows[0])
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error.message)
		console.error(error.stack) // –í—ã–≤–æ–¥–∏–º —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		res.status(500).json({
			error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
			details: error.message,
		})
	}
})

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/profile', authenticateToken, async (req, res) => {
	try {
		const { username, email, oldPassword, newPassword, avatar } = req.body

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ email –∏–ª–∏ username –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
		const existingUser = await pool.query(
			'SELECT * FROM users WHERE (email = $1 OR username = $2) AND id != $3',
			[email, username, req.user.id]
		)
		if (existingUser.rows.length > 0) {
			return res
				.status(400)
				.json({ error: 'Email –∏–ª–∏ Username —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è' })
		}

		let updateQuery = 'UPDATE users SET username = $1, email = $2'
		let queryParams = [username, email]
		let paramCount = 3

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
		if (avatar) {
			console.log('–ü–æ–ª—É—á–µ–Ω –∞–≤–∞—Ç–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è')

			// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤–∞—Ç–∞—Ä base64 —Å—Ç—Ä–æ–∫–æ–π
			if (avatar.startsWith('data:image')) {
				// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏–∑ base64 —Å—Ç—Ä–æ–∫–∏
				const matches = avatar.match(/^data:image\/([a-zA-Z]+);base64,/)
				if (!matches || matches.length !== 2) {
					return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' })
				}

				const fileExtension = matches[1]
				const base64Data = avatar.replace(/^data:image\/[a-zA-Z]+;base64,/, '')

				// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
				const filename = `avatar_${req.user.id}_${Date.now()}.${fileExtension}`
				const filePath = path.join(avatarsDir, filename)

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
				fs.writeFileSync(filePath, base64Data, 'base64')
				console.log(`–ê–≤–∞—Ç–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${filePath}`)

				// URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–≤–∞—Ç–∞—Ä—É
				const avatarUrl = `/uploads/avatars/${filename}`

				// –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
				updateQuery += `, avatar = $${paramCount}`
				queryParams.push(avatarUrl)
				paramCount++
			} else if (avatar.startsWith('/uploads/avatars/')) {
				// –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–≤–∞—Ç–∞—Ä—É, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
				console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞:', avatar)
				updateQuery += `, avatar = $${paramCount}`
				queryParams.push(avatar)
				paramCount++
			} else {
				console.warn(
					'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–≤–∞—Ç–∞—Ä–∞:',
					avatar.substring(0, 20) + '...'
				)
			}
		}

		// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–æ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π
		if (oldPassword && newPassword) {
			const user = await pool.query(
				'SELECT password FROM users WHERE id = $1',
				[req.user.id]
			)

			const isMatch = await bcrypt.compare(oldPassword, user.rows[0].password)
			if (!isMatch) {
				return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' })
			}

			const hashedNewPassword = await bcrypt.hash(newPassword, 10)
			updateQuery += ', password = $' + paramCount
			queryParams.push(hashedNewPassword)
			paramCount++
		}

		updateQuery +=
			' WHERE id = $' + paramCount + ' RETURNING id, username, email, avatar'
		queryParams.push(req.user.id)

		const updatedUser = await pool.query(updateQuery, queryParams)
		console.log('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedUser.rows[0])

		res.json({
			message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
			user: updatedUser.rows[0],
		})
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
	}
})

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete('/profile/avatar', authenticateToken, async (req, res) => {
	try {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await pool.query('SELECT avatar FROM users WHERE id = $1', [
			req.user.id,
		])

		const avatarPath = user.rows[0]?.avatar

		// –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		if (avatarPath) {
			// –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä —ç—Ç–æ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /uploads/)
			if (avatarPath.startsWith('/uploads/avatars/')) {
				// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
				const fullPath = path.join(__dirname, '..', avatarPath)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
				if (fs.existsSync(fullPath)) {
					fs.unlinkSync(fullPath)
					console.log(`–ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω: ${fullPath}`)
				} else {
					console.log(`–§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`)
				}
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			await pool.query('UPDATE users SET avatar = NULL WHERE id = $1', [
				req.user.id,
			])
		}

		res.json({
			message: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
			user: {
				id: req.user.id,
				avatar: null,
			},
		})
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞' })
	}
})

// Password reset request
router.post('/reset-password', async (req, res) => {
	try {
		const { email } = req.body

		// Check if user exists
		const userResult = await pool.query(
			'SELECT * FROM users WHERE email = $1',
			[email]
		)

		if (userResult.rows.length === 0) {
			return res.status(404).json({ error: '–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã' })
		}

		// Generate reset token
		const resetToken = crypto.randomBytes(32).toString('hex')
		const resetTokenExpiry = new Date(Date.now() + 3600000) // 1 hour from now

		// Save reset token in database
		await pool.query(
			'UPDATE users SET reset_token = $1, reset_token_expiry = $2 WHERE email = $3',
			[resetToken, resetTokenExpiry, email]
		)

		// Create email transporter
		const transporter = nodemailer.createTransport({
			host: process.env.SMTP_HOST,
			port: process.env.SMTP_PORT,
			auth: {
				user: process.env.SMTP_USER,
				pass: process.env.SMTP_PASS,
			},
		})

		// Send reset email
		const resetUrl = `http://localhost:3000/auth/new-password?token=${resetToken}`
		const mailOptions = {
			from: process.env.EMAIL_USER,
			to: email,
			subject: '“ö“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É',
			html: `
				<h1>“ö“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É —Å“±—Ä–∞—É—ã</h1>
				<p>“ö“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ –±–∞—Å—ã“£—ã–∑:</p>
				<a href="${resetUrl}">“ö“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É</a>
				<p>–ë“±–ª —Å—ñ–ª—Ç–µ–º–µ 1 —Å–∞“ì–∞—Ç –±–æ–π—ã –∂–∞—Ä–∞–º–¥—ã.</p>
				<p>–ï–≥–µ—Ä —Å—ñ–∑ “õ“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É–¥—ñ —Å“±—Ä–∞–º–∞“ì–∞–Ω –±–æ–ª—Å–∞“£—ã–∑, –±“±–ª —Ö–∞—Ç—Ç—ã –µ–ª–µ–º–µ—É—ñ“£—ñ–∑–¥—ñ —Å“±—Ä–∞–π–º—ã–∑.</p>
			`,
		}

		await transporter.sendMail(mailOptions)

		res.json({
			message:
				'“ö“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É –Ω“±—Å“õ–∞—É–ª–∞—Ä—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ',
		})
	} catch (error) {
		console.error('Password reset error:', error)
		res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ –æ—Ä—ã–Ω –∞–ª–¥—ã' })
	}
})

// Reset password with token
router.post('/new-password', async (req, res) => {
	try {
		const { token, newPassword } = req.body

		// Find user with valid reset token
		const userResult = await pool.query(
			'SELECT * FROM users WHERE reset_token = $1 AND reset_token_expiry > NOW()',
			[token]
		)

		if (userResult.rows.length === 0) {
			return res.status(400).json({
				error: '–ñ–∞—Ä–∞–º—Å—ã–∑ –Ω–µ–º–µ—Å–µ –º–µ—Ä–∑—ñ–º—ñ ”©—Ç–∫–µ–Ω “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É —Å—ñ–ª—Ç–µ–º–µ—Å—ñ',
			})
		}

		// Hash new password
		const hashedPassword = await bcrypt.hash(newPassword, 10)

		// Update password and clear reset token
		await pool.query(
			'UPDATE users SET password = $1, reset_token = NULL, reset_token_expiry = NULL WHERE reset_token = $2',
			[hashedPassword, token]
		)

		res.json({ message: '“ö“±–ø–∏—è —Å”©–∑ —Å”ô—Ç—Ç—ñ ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ' })
	} catch (error) {
		console.error('New password error:', error)
		res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ –æ—Ä—ã–Ω –∞–ª–¥—ã' })
	}
})

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
router.post('/refresh-token', async (req, res) => {
	try {
		const { token } = req.body

		if (!token) {
			return res.status(400).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' })
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫
		let decoded
		try {
			// –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
			decoded = jwt.verify(token, process.env.JWT_SECRET)
		} catch (err) {
			// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
			if (err.name === 'TokenExpiredError') {
				decoded = jwt.decode(token)
			} else {
				return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' })
			}
		}

		if (!decoded || !decoded.id) {
			return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–∫–µ–Ω–∞' })
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const userResult = await pool.query(
			'SELECT id, username, role FROM users WHERE id = $1',
			[decoded.id]
		)

		if (userResult.rows.length === 0) {
			return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
		}

		const user = userResult.rows[0]

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
		const newToken = jwt.sign(
			{ id: user.id, username: user.username },
			process.env.JWT_SECRET,
			{ expiresIn: '1d' } // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ 1 –¥–Ω—è
		)

		res.json({
			message: '–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
			token: newToken,
			user: {
				id: user.id,
				username: user.username,
				role: user.role,
			},
		})
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
		res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞' })
	}
})

module.exports = router
